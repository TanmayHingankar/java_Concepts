// 🔶 String Class Demo (Immutable)
public class Demo {
	public static void main(String[] args) 
	{
		String name = new String(); // creates empty string ""
		System.out.println(name);              // Output: (empty line)
		System.out.println(name.hashCode());   // Output: 0
		System.out.println("hello " + name);   // Output: hello 
		System.out.println(name.concat("reddy")); // Output: reddy (original 'name' unchanged)
		// String name = "Navin"; // alternate way
	}
}

// 🔶 String Immutability Example
public class Demo {
	public static void main(String[] args) 
	{
		String name = "navin";
		name = name + "reddy";               // new String object created
		System.out.println("hello" + name);  // Output: hellonavinreddy

		String s1 = "Navin";
		String s2 = "Navin";

		System.out.println(s1 == s2);        // Output: true (same reference from string pool)
	}
}

// 🔶 StringBuffer Class Demo (Mutable)
public class Demo {
	public static void main(String[] args) 
	{
		StringBuffer sb = new StringBuffer("Navin");
		// sb.length() => 5 (Navin)
		// sb.capacity() => 21 (default 16 + 5)

		sb.append("Reddy");
		System.out.println(sb);              // Output: NavinReddy

		sb.ensureCapacity(100);              // ensures capacity is at least 100
		System.out.println(sb);              // Output: NavinReddy
	}
}

/*
🔷 INTERVIEW NOTES: STRING vs STRINGBUFFER vs STRINGBUILDER
------------------------------------------------------------
| Feature         | String          | StringBuffer      | StringBuilder     |
|-----------------|------------------|--------------------|--------------------|
| Mutability      | Immutable        | Mutable            | Mutable            |
| Thread-Safe     | Yes (internally) | Yes (synchronized) | No (not sync)      |
| Performance     | Slow (new obj)   | Slower (thread-safe)| Fast (no sync)     |
| Use Case        | Small, fixed     | Multi-threaded env | Single-threaded env|

🔶 toString():
- Defined in Object class.
- Returns string representation of object.
- Automatically called in System.out.println(obj);

🔶 equals() vs ==
- == : Compares references
- equals(): Compares content (for String overrides equals)

🔶 Why String is Immutable:
- String Pool optimization
- Thread-safety
- Security (e.g. passwords)
- Hashcode caching for performance
*/



# **String in Java - Short & Simple Guide** 🚀  

## **1. Immutable vs Mutable Strings**  

### **Immutable (String)**  
- **Once created, cannot be changed**  
- **Example:**  
  ```java
  String name = "Java";  
  name.concat(" Programming"); // Creates new string, original remains "Java"  
  System.out.println(name); // Output: "Java"  
  ```
- **Why?**  
  - Thread-safe (safe in multi-threading)  
  - Security (used in passwords, network URLs)  
  - Memory efficiency (String Pool reuse)  

### **Mutable (StringBuffer & StringBuilder)**  
- **Can be modified after creation**  
- **Example:**  
  ```java
  StringBuilder sb = new StringBuilder("Hello");  
  sb.append(" World"); // Modifies same object  
  System.out.println(sb); // Output: "Hello World"  
  ```
- **Why?**  
  - Better performance for frequent changes  
  - No new object created on modification  

---

## **2. String Pool Concept**  
- **Special memory area in Heap**  
- **Reuses same string literals to save memory**  
- **Example:**  
  ```java
  String s1 = "Java";  // Stored in String Pool  
  String s2 = "Java";  // Reuses from Pool (s1 == s2 → true)  
  String s3 = new String("Java"); // Forces new object in Heap (s1 == s3 → false)  
  ```

---

## **3. StringBuffer vs StringBuilder**  
| Feature          | **StringBuffer** (Old) | **StringBuilder** (New) |
|----------------|----------------------|----------------------|
| **Thread-Safe** | ✅ (Synchronized) | ❌ (Not Synchronized) |
| **Speed** | Slower | Faster |
| **When to Use?** | Multi-threaded apps | Single-threaded apps |
| **Methods** | Same (`append()`, `insert()`, `reverse()`) | Same |

### **Example:**  
```java
StringBuffer sb1 = new StringBuffer(); // Thread-safe but slower  
StringBuilder sb2 = new StringBuilder(); // Faster but not thread-safe  
```

---

## **4. Important Methods**  
### **String Methods**  
- `length()` → Returns string length  
- `charAt(index)` → Returns character at index  
- `concat(str)` → Joins strings (returns new string)  
- `equals(str)` → Compares content (not reference)  
- `substring(start, end)` → Extracts part of string  

### **StringBuffer/StringBuilder Methods**  
- `append(str)` → Adds text at end  
- `insert(index, str)` → Inserts text at given position  
- `delete(start, end)` → Removes characters  
- `reverse()` → Reverses the string  

---

## **5. Interview Questions** ❓  

### **Q1: Why is String immutable?**  
✅ **Ans:**  
- Security (prevent hacking via reference changes)  
- Thread-safe (no sync issues)  
- Memory efficiency (String Pool reuse)  

### **Q2: Difference between `==` and `equals()`?**  
✅ **Ans:**  
- `==` → Compares **memory address**  
- `equals()` → Compares **content**  

### **Q3: When to use String vs StringBuilder?**  
✅ **Ans:**  
- Use **String** for constants (e.g., config values)  
- Use **StringBuilder** for frequent modifications (e.g., loops)  

### **Q4: What is String Pool?**  
✅ **Ans:**  
- Special heap area where Java stores unique string literals to save memory.  

### **Q5: Why is StringBuilder faster than StringBuffer?**  
✅ **Ans:**  
- **StringBuilder** is not synchronized → No thread-safety checks → Faster.  

---

## **6. Pro Tips for Coding** 💡  
✔ **Use `StringBuilder` in loops** (better performance)  
✔ **Use `equals()` for string comparison** (not `==`)  
✔ **Use `intern()` to add strings to String Pool**  

---

### **Final Summary**  
| Concept | Key Point |
|--------|----------|
| **Immutable** | `String` → Unchangeable |
| **Mutable** | `StringBuffer` (thread-safe) & `StringBuilder` (fast) |
| **String Pool** | Memory optimization for literals |
| **Best Practice** | Use `StringBuilder` for heavy string operations |

**Ye sab yaad rakh, interview crack kar lega!** 🔥😎

