‚úÖ 3Ô∏è‚É£ Drawbacks of Arrays

// ‚ùå Drawbacks:
// - Memory allocation is contiguous in heap.
// - Array size is fixed once declared.
// - Searching takes O(n) time unless sorted.
// - Only stores homogeneous (same-type) data.

class Student {
	int rollno;
	String name;
	int marks;	
}

public class Demo {
	public static void main(String[] args) {
		Student s1 = new Student();
		s1.rollno = 1;
		s1.name = "Navin";
		s1.marks = 88;

		Student s2 = new Student();
		s2.rollno = 2;
		s2.name = "Harsh";
		s2.marks = 67;

		Student s3 = new Student();
		s3.rollno = 3;
		s3.name = "Kiran";
		s3.marks = 97;

		System.out.println(s1.name + ":" + s1.marks);  // Output: Navin:88

		Student students[] = new Student[3]; // Array of object references
		students[0] = s1;
		students[1] = s2;
		students[2] = s3;

		for (int i = 0; i < students.length; i++) {
			System.out.println(students[i].name + ":" + students[i].marks);
			// Output:
			// Navin:88
			// Harsh:67
			// Kiran:97
		}
	}
}

üß† Theory:

    You can store objects in arrays.

    Each element is a reference to a Student object.

    Even though array is fixed, its elements (objects) can be changed.



üß† Interview Concepts Summary (Make Notes from Here)
Concept	Description
1D Array	int[] arr = new int[5]; ‚Äì fixed size, homogeneous
2D Array	int[][] arr = new int[3][4]; ‚Äì array of arrays
Jagged Array	int[][] arr = new int[3][]; then assign variable-length rows
Array of Objects	Store object references like Student[] students
Enhanced For-Loop	Easier syntax for arrays/lists; no index needed
Drawbacks	Fixed size, no dynamic resizing, no mixed types
Object Array	Objects in array hold references, not actual values
Default Values	int=0, boolean=false, Object=null in arrays
Heap vs Stack	Arrays/objects in heap; variables/references in stack
Garbage Collection	If reference is lost, object becomes eligible for GC
‚úÖ BONUS TIP FOR REVISION

üìù If you override toString() in Student class:

@Override
public String toString() {
	return rollno + " - " + name + " - " + marks;
}

Then,

System.out.println(stud);

Will print:

1 - Navin - 88
2 - Harsh - 67
3 - Kiran - 97


üî∂ Java Arrays ‚Äì Complete Summary (Short Notes)
üîπ 1. Array Declaration and Initialization

int[] arr = new int[5];      // default values = 0
int[] arr = {1, 2, 3, 4};    // static initialization

‚úÖ Points:

    Arrays are fixed size.

    Stored in heap.

    Can only store homogeneous data.

üîπ 2. Array Length

arr.length   // gives size of array

üìå Note: length is not a method, it‚Äôs a final variable.
üîπ 3. Copying Arrays
üî∏ i. Manual Copy

int[] newArr = new int[arr.length];
for (int i = 0; i < arr.length; i++) {
    newArr[i] = arr[i];
}

üî∏ ii. Using Arrays.copyOf()

int[] newArr = Arrays.copyOf(arr, arr.length);

üî∏ iii. Using System.arraycopy()

System.arraycopy(src, 0, dest, 0, src.length);

üîπ 4. Multidimensional Array

int[][] matrix = new int[3][4];      // 3 rows, 4 cols
int[][] jagged = new int[3][];
jagged[0] = new int[2];              // jagged row

üîπ 5. Enhanced for-loop

for (int n : arr) {
    System.out.println(n);
}

‚úÖ Best for read-only access
üî∑ Objects & Arrays of Objects

Student[] students = new Student[3]; // array of references
students[0] = new Student();

Each element is a reference to an object. Default is null.
üî∂ Important Java Keywords Related to Arrays & Objects
üîπ new keyword

    Creates object or array in heap memory.

int[] arr = new int[5];         // array of 5 ints
Student s = new Student();     // object creation

üîπ this keyword

    Refers to current object.

    Used to resolve naming conflict between instance variable and parameter.

class Student {
    int roll;
    Student(int roll) {
        this.roll = roll;   // refers to instance variable
    }
}

üî∑ toString() Method

    Inherited from Object class.

    Used to return string representation of an object.

    Default ‚Üí returns memory address (ClassName@hashcode)

    Override it for meaningful output:

@Override
public String toString() {
    return roll + " - " + name + " - " + marks;
}

üß† Printing Object

System.out.println(s);     // internally calls s.toString()

üî∂ Array Characteristics
Feature	Description
Fixed Size	Cannot be resized after creation
Homogeneous	Only same-type elements allowed
Zero-based Indexing	Index starts from 0
Stored in Heap	Even if declared in method
Default Values	int=0, boolean=false, Object=null
Efficient Access	O(1) time to access any element
