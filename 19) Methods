// âœ… Class Computer demonstrating object behavior
class Computer {
    
    // Method 1: Play music
    public void playMusic() {
        System.out.println("Music Playing..."); // âœ… Output: Music Playing...
    }

    // Method 2: Return a pen if cost is >=10
    public String getMeAPen(int cost) {
        if (cost >= 10)
            return "Pen";                      // âœ… If cost is 10 or more â†’ return "Pen"
        else
            return "Nothing";                  // Else â†’ return "Nothing"
    }
}

// âœ… Main class with main method (Execution starts from here)
public class Demo {

    public static void main(String[] args) {
        
        // Creating an object of Computer class
        Computer obj = new Computer();          // Object created in heap

        obj.playMusic();                        // Calls playMusic() â†’ Output: Music Playing...

        String src = obj.getMeAPen(10);         // Calls getMeAPen(10) â†’ cost = 10 â†’ returns "Pen"
        System.out.println(src);                // âœ… Output: Pen
    }
}


ðŸ“˜ INTERVIEW THEORY & CONCEPTS â€“ Full Notes Style
ðŸ”¹ 1. Class

    Blueprint/Template to create objects.

class Computer {
    // fields + methods
}

ðŸ”¹ 2. Object

    Real-world instance of a class.

Computer obj = new Computer();

ðŸ”¸ Stored in Heap Memory
ðŸ”¸ obj is reference variable (in Stack) pointing to object
ðŸ”¹ 3. Method

    Block of code that performs a specific task.

Syntax:

return_type methodName(parameters) {
    // code
    return value; // if return_type is not void
}

ðŸ”¸ void â†’ no return
ðŸ”¸ String â†’ must return string
ðŸ”¹ 4. Method Calling using Object

obj.playMusic();         // void method â†’ just performs task
String val = obj.getMeAPen(10);  // returns "Pen"

ðŸ”¹ 5. Return Statement

    Immediately exits from the method and returns a value.

return "Pen"; // method returns a string

ðŸ”¹ 6. Control Flow (If-Else)

if (cost >= 10)
    return "Pen";
else
    return "Nothing";

âœ… MEMORY ALLOCATION IN JAVA:
Type	Location
Objects	Heap
Local vars	Stack
Class info	Method Area

âœ… INTERVIEW QUESTIONS:
Question	Best Answer
What is a class?	A class is a blueprint/template from which objects are created.
What is an object?	An object is an instance of a class with real memory allocated.
What is a method?	A method is a block of code that performs a specific task.
What is return type in method?	It defines the data type the method will return.
Difference between void and return method?	void doesn't return anything. Return method sends a value back.

âœ… Real Life Analogy:
Java Concept	Real Life
Class	Car Design
Object	Real Car
Method	Features like start(), drive()
Return Method	ATM that gives you money (value)
Void Method	Washing Machine (does task but gives nothing back)

Class â†’ Blueprint
Object â†’ Instance of Class
Method â†’ Action block
Return â†’ Sends back value
Void â†’ Does not return
Object.method() â†’ Method Call
Heap â†’ Object memory
Stack â†’ Local variable memory

    Four Pillars of OOP:

        Encapsulation (Data hiding)

        Abstraction (Hiding complexity)

        Inheritance (IS-A relationship)

        Polymorphism (Many forms)

    Method Signature:

        Combination of method name + parameters

        Example: getMeAPen(int) is the signature

    Return Types:

        Can be primitive (int), object (String), or void

        Must match declared type

    Variable Scope:

        Instance variables (class level)

        Local variables (method level)

        Parameters (method input)

    Object Creation:

        new keyword allocates memory

        Constructor initializes object state

    Memory Allocation:

        Stack (method calls, local variables)

        Heap (objects and instance variables)

        Practical Applications:

    Modeling Real-World Entities:

        Like the Computer class represents actual computers

    Building Modular Code:

        Methods divide functionality into logical units

    Data Protection:

        Encapsulation prevents unauthorized access

    Code Reusability:

        Create multiple Computer objects with different states
